{"version":3,"file":"Modal.js","sourceRoot":"","sources":["../../src/modal/Modal.tsx"],"names":[],"mappings":";;AAaA,sBA4BC;AAxCD,kDAA2C;AAC3C,iCAA4C;AAE5C,iDAAiD;AACjD,oDAAiD;AAQjD,SAAgB,KAAK,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAc;IAC9D,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,IAAA,8BAAe,GAAE,CAAC;IACnF,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAC;IAC3E,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAiC,CAAC;IAClE,MAAM,WAAW,GAAG,WAAW,EAAE,QAAQ,CAAC;IAC1C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,KAAK,GAAG,IAAA,mBAAM,GAAE,CAAC;YACvB,SAAS,CAAC;gBACR,SAAS,EAAE,QAAQ;gBACnB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;aAC3B,CAAC,CAAC;YACH,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACzB,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,WAAW,IAAI,cAAc,KAAK,WAAW,EAAE,CAAC;gBAClD,UAAU,EAAE,CAAC;YACf,CAAC;QACH,CAAC;QACD,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACd,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { NavigationProp, type ParamListBase } from '@react-navigation/native';\nimport { nanoid } from 'nanoid/non-secure';\nimport { useEffect, useState } from 'react';\n\nimport { useModalContext } from './ModalContext';\nimport { useNavigation } from '../useNavigation';\n\nexport interface ModalProps {\n  children: React.ReactNode;\n  visible: boolean;\n  onClose?: () => void;\n}\n\nexport function Modal({ children, visible, onClose }: ModalProps) {\n  const { modalConfig, openModal, closeModal, addEventListener } = useModalContext();\n  const [currentModalId, setCurrentModalId] = useState<string | undefined>();\n  const navigation = useNavigation<NavigationProp<ParamListBase>>();\n  const openModalId = modalConfig?.uniqueId;\n  useEffect(() => {\n    if (visible) {\n      if (openModalId) {\n        throw new Error('Cannot open modal inside modal');\n      }\n      const newId = nanoid();\n      openModal({\n        component: children,\n        uniqueId: newId,\n        navigationProp: navigation,\n      });\n      setCurrentModalId(newId);\n      if (onClose) {\n        return addEventListener('close', onClose);\n      }\n    } else {\n      if (openModalId && currentModalId === openModalId) {\n        closeModal();\n      }\n    }\n    return () => {};\n  }, [visible]);\n  return null;\n}\n"]}